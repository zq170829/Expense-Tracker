const asyncHandler = require("express-async-handler");
const Expense = require("../models/expenseModel");
const User = require("../models/userModel");

// @desc    Get expense
// @route   GET /api/expenses
// @access  Private
const getExpense = asyncHandler(async (req, res) => {
  const expenses = await Expense.find({ user: req.user.id });

  res.status(200).json(expenses);
});

// @desc    Set expense
// @route   POST /api/expenses
// @access  Private
const setExpense = asyncHandler(async (req, res) => {
  if (!req.body.category) {
    res.status(400);
    throw new Error("Please enter expense category");
  }

  const expense = await Expense.create({
    category: req.body.category,
    amount:req.body.amount,
    user: req.user.id,
  });

  res.status(200).json(expense);
});

// @desc    Update expense
// @route   PUT /api/expenses/:id
// @access  Private
const updateExpense = asyncHandler(async (req, res) => {
  const expense = await Expense.findById(req.params.id);

  if (!expense) {
    res.status(400);
    throw new Error("Expense not found");
  }

  // Check for user
  if (!req.user) {
    res.status(401);
    throw new Error("User not found");
  }

  // Make sure the logged in user matches the goal user
  if (expense.user.toString() !== req.user.id) {
    res.status(401);
    throw new Error("User not authorized");
  }

  const updateExpense = await Expense.findByIdAndUpdate(
    req.params.id,
    req.body,
    {
      new: true,
    }
  );

  res.status(200).json(updateExpense);
});

// @desc    Delete expense
// @route   DELETE /api/expenses/:id
// @access  Private
const deleteExpense = asyncHandler(async (req, res) => {
  const expense = await Goal.findById(req.params.id);

  if (!expense) {
    res.status(400);
    throw new Error("Expense not found");
  }

  // Check for user
  if (!req.user) {
    res.status(401);
    throw new Error("User not found");
  }

  // Make sure the logged in user matches the goal user
  if (expense.user.toString() !== req.user.id) {
    res.status(401);
    throw new Error("User not authorized");
  }

  await expense.remove();

  res.status(200).json({ id: req.params.id });
});

module.exports = {
  getExpense,
  setExpense,
  updateExpense,
  deleteExpense,
};
